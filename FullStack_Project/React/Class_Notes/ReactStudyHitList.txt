There are several key concepts that are important to understand to master frontend development in React:

Components: React is built on the concept of reusable components. A component is a piece of code that represents a single UI element on a page. 
Understanding how to create, use and manage components is essential to building efficient and maintainable code in React.

JSX: JSX is a syntax extension for JavaScript that allows you to write HTML-like elements in your JavaScript code. 
In React, you use JSX to define the structure of your components, and React will use this to render the UI.

Props and state: Props and state are the two main ways that components in React can manage and share data. 
Props are passed down to a component from its parent, while state is managed within the component itself. Understanding the difference between props and state and how to use them correctly is crucial to building well-architected and efficient React apps.

Lifecycle methods: React components have a set of lifecycle methods that are called at different points during the component's existence. 
Understanding these lifecycle methods and when to use them is essential to building efficient and performant React apps.

Event handling: React components can handle events and react to user interactions. 
Understanding how to handle events and how to use event handlers and event binding is important to building responsive and interactive user interfaces.

Virtual DOM: React uses a virtual DOM to optimize the performance of React applications. 
Understanding how the virtual DOM works and how it improves performance is important to building efficient and performant React apps.

Routing: Routing is the process of mapping URLs to the corresponding components that should be displayed. 
Understanding how to configure and use React Router is important to building single-page applications that can be navigated through different URLs.

Redux or other state management libraries: As the application grows, managing state can become complex, it's important to understand how to use libraries 
like Redux or MobX to manage the state in an efficient way.

Handling Forms and Form Validation: Forms are a fundamental part of most web applications, understanding how to handle forms, and how to validate form inputs, 
is important to building robust and user-friendly web apps.

Optimizing performance: Optimizing the performance of your React application is essential to building fast and responsive web apps. 
Understanding techniques like code splitting, lazy loading, and use of web workers to optimize the performance of your React apps is important to building performant applications.

By understanding these concepts and best practices, you will be able to effectively build and maintain React applications that are scalable, performant, and easy to maintain.