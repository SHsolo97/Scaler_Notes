React WebPack
Webpack is a JavaScript module bundler that is commonly used in React applications. 
It takes all of the various JavaScript files and assets in a project and creates a bundle, or a single file that contains everything the application needs to run.

In a React application, webpack is typically used to bundle the React code and all of its dependencies, as well as any other assets such as CSS, images, and fonts.

Webpack also has the ability to run a development server that allows developers to see the changes they make to the application in real-time 
and also has the ability to transpile the code to a version of JavaScript that is compatible with older browsers.

Webpack also has a lot of plugins and loaders that can be used to customize the bundling process, 
such as the ability to minify the code, add source maps, and perform other tasks to improve the performance of the application.

In summary, React webpack is a tool that allows developers to bundle their React code, dependencies, and assets into a single file, making it easy to run and deploy the application. 
It also allows developers to customize the bundling process to improve the performance of the application and make it compatible with older browsers.

Named Import vs Default Import

Handling Events
    onClick
    onChange

Props
useState

React always has one way data flow ie :
React always expects the parent to send data to child and not vise versa.
This is because when parent sends state to child and the the state chenges then the child is re rendered with the new data of the state with minimum changes.

If we need to re render parent from child we need to use Redux or Context API by making the state global then local.

useEffect is a React Hook that allows you to synchronize a component with an external system. 
It is used to handle side effects, such as data fetching, subscriptions, and manually changing the DOM in React functional components.

useEffect takes a callback function as its first argument, which is called after the component has rendered. 
The callback function is where you can perform your side effects, such as fetching data from an API or subscribing to a browser event.

The second argument to useEffect is an array of values (dependencies), which tells React when to re-run the effect. 
If the values in the array change, the effect will be re-run. If the array is empty, the effect will only run once on the initial render.

Here is an example of how useEffect can be used to fetch data from an API:

import { useEffect, useState } from 'react';

function MyComponent() {
  const [data, setData] = useState([]);

  useEffect(() => {
    async function fetchData() {
      const response = await fetch('https://api.example.com/data');
      const data = await response.json();
      setData(data);
    }
    fetchData();
  }, []);

  return <div>{data.map(item => item.name)}</div>;
}

In this example, the useEffect hook is used to fetch data from an API and update the state with the response. 
The empty array as the second argument tells React that this effect should only run on the initial render of the component.

useEffect allows you to handle side effects in a way that is similar to lifecycle methods in class components, but it is more powerful and flexible since it can be used multiple times in a component and allows you to control the timing of when side effects happen. 
This makes it a very useful tool for handling external interactions and updating the state of a component based on them.

Conditional Rendering
