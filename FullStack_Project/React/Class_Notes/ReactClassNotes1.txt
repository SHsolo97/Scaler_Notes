Single Page Application:

A single-page application (SPA) is a type of web application that loads a single HTML page and dynamically updates the content as the user interacts with the app. 
Instead of the browser requesting new pages from a server, a SPA loads a single HTML page and dynamically updates the content as the user interacts with the app. 
This allows for a more seamless user experience, as the page does not need to be reloaded each time the user clicks a link or button.

SPAs are typically built using JavaScript frameworks or libraries such as Angular, React, or Vue.js. 
These frameworks provide a structure for building web apps and handle the dynamic updates to the content, routing, and other functionality.

One of the main benefits of SPA is that it reduces the amount of data sent over the network, because the browser does not need to request new pages from the server. 
This improves the performance of the application and makes it feel more responsive to the user.

Another advantage of SPA is that it allows for offline functionality, since the app can continue to work when there is no internet connection. 
This is because the app has already loaded all the necessary resources and data, so it can continue to function without needing to contact the server.

Please note that SPA is not the only approach and it depends on the specific requirements of the project whether it is the best option or not.


Vanilla Javascript Applications are generally faster than React apps.
In case of rerendering previous data and switching from hard reloads to only changing components in the page that needs to be changed in certain cenarios React can be faster.
Why is React preferred and used :
    More developer friendly.
    Better reusability of components.
    Better state management when it comes to bigger projects.
    lightweight
    Good community support.


In React, the Virtual DOM (Document Object Model) is an abstract representation of the actual DOM. 
It is a lightweight JavaScript object that is used to optimize the performance of React applications by reducing the number of changes that need to be made to the actual DOM.

When a component's state or props change, React will first update the Virtual DOM. 
It will then compare the Virtual DOM to the actual DOM and determine the minimal set of changes that need to be made to the actual DOM to bring it in line with the Virtual DOM. 
This process is called "reconciliation".

The benefits of using a Virtual DOM are:
    It improves performance by reducing the number of changes that need to be made to the actual DOM.
    It allows React to efficiently update and render components, even when the underlying data changes frequently.
    It improves the maintainability of code by reducing the number of direct DOM manipulations.

React's Virtual DOM is one of the key features that makes it an efficient and powerful JavaScript library for building user interfaces. 
It allows developers to write declarative and efficient code, without having to worry about the underlying DOM manipulation.

De Structuring objects from props/maps/arrays.

De Structuring Arrays:
let numbers = [1, 2, 3];
let [a, b, c] = numbers;
console.log(a); // 1
console.log(b); // 2
console.log(c); // 3

De Structuring Objects:
eg1 :
let person = {name: 'John', age: 25};
let {name, age} = person;
console.log(name); // 'John'
console.log(age); // 25

eg2 :
let person = {name: 'John'};
let {name, age=30} = person;
console.log(name); // 'John'
console.log(age); // 30


Spread operator on Array and Objects

Arrays 
eg1:
let array1 = [1, 2, 3];
let array2 = [4, 5, 6];
let combinedArray = [...array1, ...array2];
console.log(combinedArray); // [1, 2, 3, 4, 5, 6]

eg2:
let array1 = [1, 2, 3];
let array2 = [...array1];
console.log(array2); // [1, 2, 3]

Objects 
eg1:
let object1 = {a: 1, b: 2};
let object2 = {c: 3, d: 4};
let combinedObject = {...object1, ...object2};
console.log(combinedObject); // {a: 1, b: 2, c: 3, d: 4}


The spread operator is a powerful feature that allows you to easily combine, copy, and spread arrays and objects in a concise and readable way. 
It makes your code more readable, reusable and maintainable.

